% This script analyzes the classification results generated by s_classify.m
% script and produces the classification accuracy tables, figures and
% images. You can use this script to generate data from Fig. 1 and 3 in the
% manuscript.
%
% Copyright, Henryk Blasinski 2017
close all;
clear all;
clc;

[codePath, parentPath] = olRootPath();

% resultDir = fullfile(parentPath,'Results');
resultDir = fullfile('/','Volumes','MyPassport','OptimalLight','ResultsSimplified');

destDir = fullfile(parentPath,'TestFigures');
if ~exist(destDir,'dir')
    mkdir(destDir);
end

%% Initialize

validTargets = {'GreenApples','YellowAndGreenPears','Lemons',...
    'RedAndGreenApples'};

target = 'Lemons';

switch target
    
    case 'YellowAndGreenPears'
        x = [373;868;295;733];
        y = [241;221;593;509];
        delta = 50;
        nClasses = 4;
        
    case 'Lemons'
        x = [364; 890];
        y = [457; 454];
        delta = 100;
        nClasses = 2;
        
    case 'RedAndGreenApples'
        x = [339;816;260;818];
        y = [257;263;531;552];
        delta = 50;
        nClasses = 4;
        
    case 'GreenApples'        
        x = [300;910];
        y = [325;329];
        % delta = 100; Used in training
        delta = 350; % Used for display
        nClasses = 2;
     
end

conventionalCameras = {'AptinaMT9M031','AptinaMT9M131',...
    'Canon1DMarkIII','Canon5DMarkII','Canon20D','Canon40D','Canon50D','Canon60D','Canon300D','Canon500D','Canon600D'...
    'HasselbladH2',...
    'NikonD1','NikonD3','NikonD3X','NikonD40','NikonD50','NikonD70','NikonD80','NikonD90','NikonD100','NikonD200',...
    'NikonD200IR','NikonD300s','NikonD700','NikonD5100',...
    'NokiaN900',...
    'OlympusE-PL2',...
    'PentaxK-5','PentaxQ',...
    'PhaseOne',...
    'PointGreyGrasshopper50S5C','PointGreyGrasshopper214S5C',...
    'SONYNEX-5N'};

illTemps = [10000 6500 4000 2000];

optimalCameras = {'Unsup','Sup'};
classifierNames = {'SVM','KNN','DA','Tree','NB'};

%% Optimal cameras
%  Assemble classification results from optimal cameras

optimalResults = zeros(length(optimalCameras),length(classifierNames));
optimalCM = zeros(nClasses,nClasses,length(classifierNames),length(optimalCameras));
optimalCorrect = cell(nClasses,length(classifierNames),length(optimalCameras));
optimalFile = cell(length(classifierNames),length(optimalCameras));
optimalModel = cell(length(classifierNames),length(optimalCameras));


for cam=1:length(optimalCameras)
    for c=1:length(classifierNames)
        
        fNames = fullfile(resultDir,target,'Optimal',sprintf('%s_*_%i_%s.mat',optimalCameras{cam},3,classifierNames{c}));
        files = dir(fNames);
        
        accy = [];
        pred = {};
        true = {};
        mdl = {};
        
        for f=1:length(files)
            subfName = fullfile(resultDir,target,'Optimal',files(f).name);
            if exist(subfName,'file') == false, continue; end
            data = load(subfName);
            accy = cat(1,accy,data.accy');
            pred = cat(1,pred,data.predicted');
            true = cat(1,true,data.true');
            mdl = cat(1,mdl,data.model');
            
        end
        
        [optimalResults(cam,c), id] = max(accy(:));
        
        optimalCM(:,:,c,cam) = confusionmat(pred{id},true{id});
        optimalModel{c,cam} = mdl{id};

        
        % Save the input file name
        [a, b] = ind2sub(size(true),id);
        optimalFile{c,cam} = files(a).name;
        pos = strfind(optimalFile{c,cam},'_');
        optimalFile{c,cam} = [optimalFile{c,cam}(1:pos(3)-1) '.mat'];
        
        
        for cl=1:nClasses
            optimalCorrect{cl,c,cam} = pred{id}(true{id}==cl) == true{id}(true{id} == cl);
        end
        
    end
end

%% RGB cameras
%  Assemble classification results from conventional cameras

conventionalResults = zeros(length(conventionalCameras),length(classifierNames),length(illTemps));
conventionalCM = zeros(nClasses,nClasses,length(classifierNames),length(illTemps));
conventionalCorrect = cell(nClasses,length(classifierNames),length(conventionalCameras),length(illTemps));
conventionalModel = cell(length(classifierNames),length(conventionalCameras),length(illTemps));


for t=1:length(illTemps)
    for cam=1:length(conventionalCameras)
        for c=1:length(classifierNames)
            fNames = fullfile(resultDir,target,'Conventional',sprintf('%s_%iK_%s.mat',conventionalCameras{cam},illTemps(t),classifierNames{c}));
            
            if exist(fNames,'file') == false, continue; end;
            
            data = load(fNames);
            [conventionalResults(cam,c,t), id] = max(data.accy);
            
            conventionalCM(:,:,c,t) = conventionalCM(:,:,c,t) + confusionmat(data.predicted{id},data.true{id});
            if isfield(data,'model')
                conventionalModel{c,cam,t} = data.model{id};
            end
            
            for cl=1:nClasses
                conventionalCorrect{cl,c,cam,t} = data.predicted{id}(data.true{id}==cl) == data.true{id}(data.true{id} == cl);
            end
            
        end
    end
end
conventionalCM = conventionalCM/length(conventionalCameras);

%% Compare classificaiton accuracy under daylight (6500K) vs. optimal
daylightResults = conventionalResults(:,:,illTemps == 6500);
results = [min(daylightResults); mean(daylightResults); max(daylightResults); optimalResults];

lw = 2;
fs = 14;

figure;
hold on; grid on; box on;
set(gca,'FontSize',fs);
set(gcf,'PaperPosition',[1 1 18 9]);
bar(results'*100);
plot(0:length(classifierNames)+1,ones(length(classifierNames)+2,1)/nClasses*100,'r','LineWidth',lw);
set(gca,'xTick',1:length(classifierNames));
set(gca,'xTickLabels',classifierNames);
ylabel('Classification accuracy, %');
legend({'worst RGB','avg. RGB','best RGB','Unsup.','Sup.'},'location','SouthOutside','orientation','horizontal');

if isempty(destDir) == 0
    fName = fullfile(destDir,'OptimalIlluminants.eps');
    print('-depsc',fName);
end

%% Compare RGB classification accuracy under different lights

figure;
hold on; grid on; box on;
set(gca,'FontSize',fs);
set(gcf,'Units','centimeters');
set(gcf,'PaperPosition',[1 1 9 4.5]);
bar(squeeze(mean(conventionalResults))*100);
plot(0:length(classifierNames)+1,ones(length(classifierNames)+2,1)/nClasses*100,'r','LineWidth',lw);
set(gca,'xTick',1:length(classifierNames));
set(gca,'xTickLabels',classifierNames);
ylabel('Classification accuracy, %');

leg = cell(length(illTemps),1);
for i=1:length(illTemps), leg{i} = sprintf('%iK',illTemps(i)); end
leg{i+1} = 'Chance';
legend(leg,'location','SouthOutside','orientation','horizontal');

if isempty(destDir) == 0
    fName = fullfile(destDir,'RGB+Illuminants.eps');
    print('-depsc',fName);
end


%% Display results using entire images

% Pick the RGB camera whit the performance that is the most similar to the
% average accuracy.
avgAccy = mean(conventionalResults(:,:,illTemps == 6500),1);
[~, similarID] = min((conventionalResults(:,:,illTemps == 6500) - repmat(avgAccy,[length(conventionalCameras) 1 1])).^2,[],1);


classIndicator = [];
temp = 6500;
wave = 400:4:800;

fName = fullfile(parentPath,'Parameters','qe');
qe = ieReadSpectra(fName,wave);
qe = qe/max(qe(:));

switch target
    case 'Lemons'
        fakeFile = rgb2gray(imread(fullfile(parentPath,'Images',target,'Masks','fakeLemon.png')));
        classIndicator = [classIndicator, fakeFile(:) > 128];
        
        realFile = rgb2gray(imread(fullfile(parentPath,'Images',target,'Masks','realLemon.png')));
        classIndicator = [classIndicator, realFile(:) > 128];
        
        wpCoord = [883,451];
        
        fName = fullfile(parentPath,'Parameters','fakeLemon');
        refl1 = ieReadSpectra(fName,wave);
        labels1 = ones(1,size(refl1,2));
        
        fName = fullfile(parentPath,'Parameters','realLemon');
        refl2 = ieReadSpectra(fName,wave);
        labels2 = 2*ones(1,size(refl2,2));
        
        
    case 'GreenApples'
        fakeFile = rgb2gray(imread(fullfile(parentPath,'Images',target,'Masks','fakeApple.png')));
        classIndicator = [classIndicator, fakeFile(:) > 128];
        
        realFile = rgb2gray(imread(fullfile(parentPath,'Images',target,'Masks','realApple.png')));
        classIndicator = [classIndicator, realFile(:) > 128];
        
        fName = fullfile(parentPath,'Parameters','fakeGreenApple');
        refl1 = ieReadSpectra(fName,wave);
        labels1 = ones(1,size(refl1,2));
        
        fName = fullfile(parentPath,'Parameters','realGreenApple');
        refl2 = ieReadSpectra(fName,wave);
        labels2 = 2*ones(1,size(refl2,2));
        
        wpCoord = [327,836];
        
    case 'RedAndGreenApples'
        fakeFile = rgb2gray(imread(fullfile(parentPath,'Images',target,'Masks','fakeGreenApple.png')));
        classIndicator = [classIndicator, fakeFile(:) > 128];
        
        realFile = rgb2gray(imread(fullfile(parentPath,'Images',target,'Masks','realGreenApple.png')));
        classIndicator = [classIndicator, realFile(:) > 128];
        
        fakeFile = rgb2gray(imread(fullfile(parentPath,'Images',target,'Masks','fakeRedApple.png')));
        classIndicator = [classIndicator, fakeFile(:) > 128];
        
        realFile = rgb2gray(imread(fullfile(parentPath,'Images',target,'Masks','realRedApple.png')));
        classIndicator = [classIndicator, realFile(:) > 128];
        
        wpCoord = [947,415];
        
        fName = fullfile(parentPath,'Parameters','fakeGreenApple');
        refl1 = ieReadSpectra(fName,wave);
        labels1 = ones(1,size(refl1,2));
        
        fName = fullfile(parentPath,'Parameters','realGreenApple');
        refl2 = ieReadSpectra(fName,wave);
        labels2 = 2*ones(1,size(refl2,2));
        
        fName = fullfile(parentPath,'Parameters','fakeRedApple');
        refl3 = ieReadSpectra(fName,wave);
        labels3 = 3*ones(1,size(refl3,2));
        
        fName = fullfile(parentPath,'Parameters','realRedApple');
        refl4 = ieReadSpectra(fName,wave);
        labels4 = 4*ones(1,size(refl4,2));
        
    case 'YellowAndGreenPears'
        fakeFile = rgb2gray(imread(fullfile(parentPath,'Images',target,'Masks','fakeGreenPear.png')));
        classIndicator = [classIndicator, fakeFile(:) > 128];
        
        realFile = rgb2gray(imread(fullfile(parentPath,'Images',target,'Masks','realGreenPear.png')));
        classIndicator = [classIndicator, realFile(:) > 128];
        
        fakeFile = rgb2gray(imread(fullfile(parentPath,'Images',target,'Masks','fakeYellowPear.png')));
        classIndicator = [classIndicator, fakeFile(:) > 128];
        
        realFile = rgb2gray(imread(fullfile(parentPath,'Images',target,'Masks','realYellowPear.png')));
        classIndicator = [classIndicator, realFile(:) > 128];
        
        wpCoord = [967,426];
        
        fName = fullfile(parentPath,'Parameters','fakeGreenPear');
        refl1 = ieReadSpectra(fName,wave);
        labels1 = ones(1,size(refl1,2));
        
        fName = fullfile(parentPath,'Parameters','realGreenPear');
        refl2 = ieReadSpectra(fName,wave);
        labels2 = 2*ones(1,size(refl2,2));
        
        fName = fullfile(parentPath,'Parameters','fakeYellowPear');
        refl3 = ieReadSpectra(fName,wave);
        labels3 = 3*ones(1,size(refl3,2));
        
        fName = fullfile(parentPath,'Parameters','realYellowPear');
        refl4 = ieReadSpectra(fName,wave);
        labels4 = 4*ones(1,size(refl4,2));
        
end

classIndicator = logical(classIndicator);


rgbfName = fullfile(parentPath,'Images',target,'Conventional',sprintf('%s_%iK.mat',conventionalCameras{similarID(1)},temp));
rgbImg = load(rgbfName);
Img = rgbImg.Img;

Img =  (Img./repmat(max(max(Img)),[size(Img,1), size(Img,2), 1])).^(1/2.2);
figure; imshow(Img);

for cam = 1:length(optimalCameras)
    for c = 1:1% length(classifierNames)
        
        fprintf('Displaying image for %s selection %s classifier.\n',optimalCameras{cam},classifierNames{c});
        
        fName = fullfile(parentPath,'Images',target,'Optimal',optimalFile{c,cam});
        optimalData = load(fName);
        
        fName = fullfile(parentPath,'Images',target,'Conventional',sprintf('%s_%iK.mat',conventionalCameras{similarID(1)},temp));
        rgbData = load(fName);
        
        
        imgRGBVec = reshape(rgbData.Img,[size(rgbData.Img,1)*size(rgbData.Img,2), 3]);
        imgOptVec = reshape(optimalData.Img,[size(optimalData.Img,1)*size(optimalData.Img,2), 3]);
        
        resultRGB = zeros(size(rgbData.Img,1),size(rgbData.Img,2));
        resultOpt = zeros(size(rgbData.Img,1),size(rgbData.Img,2));
        
        for i=1:size(classIndicator,2)
            
            predRGB = predict(conventionalModel{c,similarID(1),illTemps==temp},imgRGBVec(classIndicator(:,i),:));
            predOptimal = predict(optimalModel{c,cam},imgOptVec(classIndicator(:,i),:));
            
            
            resultRGB(classIndicator(:,i)) = i*(predRGB == i);
            resultOpt(classIndicator(:,i)) = i*(predOptimal==i);
            
        end
        
        % RGB image
        wb = rgbData.Img(wpCoord(1),wpCoord(2),:);
        rgbImg = reshape(reshape(rgbData.Img,[size(rgbData.Img,1)*size(rgbData.Img,2), size(rgbData.Img,3)])*diag(1./wb(:)),size(rgbData.Img));
        rgbImg = rgbImg./max(rgbImg(:));
        figure; imshow(rgbImg.^(1/2.2));
        
        if ~isempty(destDir)
            fName = fullfile(destDir,sprintf('%s_%i_rgbImage.png',conventionalCameras{similarID(1)},temp));
            imwrite(rgbImg.^(1/2.2),fName);
        end
        
        % Image
        figure; imshow(uint8(resultRGB),'border','tight');
        colormap lines;
        
        if ~isempty(destDir)
            fName = fullfile(destDir,sprintf('%s_%s_%i_%s_class.eps',target,conventionalCameras{similarID(1)},temp,classifierNames{c}));
            print('-depsc',fName);
        end
        
        
        % Curves
        figure;
        box off; hold on;
        plot(rgbData.wave,rgbData.cameraIll(:,1),'r','lineWidth',3);
        plot(rgbData.wave,rgbData.cameraIll(:,2),'g','lineWidth',3);
        plot(rgbData.wave,rgbData.cameraIll(:,3),'b','lineWidth',3);
        ylim([0 1.1*max(rgbData.cameraIll(:))]);
        set(gca,'XTickLabel',[]);
        set(gca,'YTickLabel',[]);
        set(gca,'XTick',[]);
        set(gca,'YTick',[]);
        set(gca,'Units','centimeter');
        set(gcf,'PaperPosition',[1 1 2 1]);
        
        if ~isempty(destDir)
            fName = fullfile(destDir,sprintf('%s_curves.eps',conventionalCameras{similarID(1)}));
            print('-depsc',fName);
        end
        
        
        % Spectra
        cm = colormap('lines');
        cmhsv = rgb2hsv(cm);
        cmhsv(:,2) = 0.3*cmhsv(:,2);
        cmhsv(:,3) = min(1.2*cmhsv(:,3),1);
        cm2 = hsv2rgb(cmhsv);
        figure;
        hold on; grid on; box on;
        plot(wave,diag(qe)*refl1,'color',cm2(1,:));
        plot(wave,diag(qe)*refl2,'color',cm2(2,:));
        if nClasses > 2
            plot(wave,diag(qe)*refl3,'color',cm2(3,:));
            plot(wave,diag(qe)*refl4,'color',cm2(4,:));
        end
        tmp = optimalData.X/max(optimalData.X(:));
        plot(rgbData.wave,tmp(:,1),'r','lineWidth',3);
        plot(rgbData.wave,tmp(:,2),'g','lineWidth',3);
        plot(rgbData.wave,tmp(:,3),'b','lineWidth',3);
        xlabel('Wavelength, nm','Fontsize',10);
        ylim([0 1.05]);
        set(gca,'XTick',400:100:800);
        set(gca,'YTick',0:0.2:1);
        set(gca,'Units','centimeter');
        set(gcf,'PaperPosition',[1 1 4 3.2]);
        
        if ~isempty(destDir)
            fName = fullfile(destDir,sprintf('%s_%s_%s_spectra.eps',target,optimalCameras{cam},classifierNames{c}));
            print('-depsc',fName);
        end
        
        figure; imshow(uint8(resultOpt),'border','tight');
        colormap lines;
        
        if ~isempty(destDir)
            fName = fullfile(destDir,sprintf('%s_%s_%s_class.eps',target,optimalCameras{cam},classifierNames{c}));
            print('-depsc',fName);
        end
        
        % Curves
        figure;
        box off; hold on;
        plot(rgbData.wave,optimalData.X(:,1),'r','lineWidth',3);
        plot(rgbData.wave,optimalData.X(:,2),'r','lineWidth',3);
        plot(rgbData.wave,optimalData.X(:,3),'b','lineWidth',3);
        ylim([0 1.1*max(optimalData.X(:))]);
        set(gca,'XTickLabel',[]);
        set(gca,'YTickLabel',[]);
        set(gca,'XTick',[]);
        set(gca,'YTick',[]);
        set(gca,'Units','centimeter');
        set(gcf,'PaperPosition',[1 1 2 1]);
        
        if ~isempty(destDir)
            fName = fullfile(destDir,sprintf('%s_%s_%s_curves.eps',target,optimalCameras{cam},classifierNames{c}));
            print('-depsc',fName);
        end
        
    end
end


