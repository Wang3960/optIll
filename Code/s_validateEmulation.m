% This script asseses the 'quality' of the camera emulation approach. On
% the one hand we simulate the appearance of a Macbeth chart under a
% specific illuminant to a particular camera. On the other we use image
% data captured with a monochrome camera and RGB-camera emulating
% illumination.
%
% Copyright, Henryk Blasinski 2017.

close all;
clear all;
clc;

ieInit;

[codePath, parentPath] = olRootPath();

wave = 400:5:1000;
nWaves = length(wave);

%% Initialize

fName = fullfile(parentPath,'Parameters','LEDCubeSpectra');
leds = ieReadSpectra(fName,wave);
leds = Energy2Quanta(wave,leds);
leds = leds/max(leds(:));
nLEDs = size(leds,2);

target = 'YellowAndGreenPears';

switch target
    case 'Lemons'
        imageCp = [424 913;902 907;894 599;422 603];
    case 'GreenApples'
        imageCp = [293 869;862 903;875 525;307 501];
    case 'RedAndGreenApples'
        imageCp = [388 971;864 1001;877 675;390 661];
    case 'YellowAndGreenPears'
        imageCp = [388 1005;888 1007;879 680;382 678];
end

fName = fullfile(parentPath,'Parameters','qe');
qe = ieReadSpectra(fName,wave);

cameras = {'AptinaMT9M031','AptinaMT9M131',...
    'Canon1DMarkIII','Canon5DMarkII','Canon20D','Canon40D','Canon50D','Canon60D','Canon300D','Canon500D','Canon600D'...
    'HasselbladH2',...
    'NikonD1','NikonD3','NikonD3X','NikonD40','NikonD50','NikonD70','NikonD80','NikonD90','NikonD100','NikonD200',...
    'NikonD200IR','NikonD300s','NikonD700','NikonD5100',...
    'NokiaN900',...
    'OlympusE-PL2',...
    'PentaxK-5','PentaxQ',...
    'PhaseOne',...
    'PointGreyGrasshopper50S5C','PointGreyGrasshopper214S5C',...
    'SONYNEX-5N'};

illTemps = [10000 6500 4000 2000];

nTemps = length(illTemps);
nCameras = length(cameras);

meanData = cell(nTemps,nCameras);
meanMeasuredData = cell(nTemps,nCameras);

fName = fullfile(parentPath,'Parameters','macbethChart');
refl = ieReadSpectra(fName,wave);
refl = mat2cell(refl,size(refl,1),ones(24,1));
refl = reshape(refl,[4 6]);

%% Main comparison loop

for t=1:nTemps
    
    scene = sceneFromReflectanceCell(refl,5,wave);
    
    ill = illuminantCreate('blackbody',wave,illTemps(t));
    illSpectrum = Energy2Quanta(wave,illuminantGet(ill,'Energy'));
    maxI = max(illSpectrum);
    
    % In practice we use the least-squares approximation to the blackbody
    % illuminant that is generated by LEDCube, we need to include this
    % effect in the simulations.
    
    cvx_begin
        variables wghts(nLEDs,1)
        minimize norm(illSpectrum/maxI - leds*wghts)
        subject to
            leds*wghts >= 0
    cvx_end
    
    ledCubeSpectrum = leds*wghts*maxI;
    ill = illuminantSet(ill,'energy',Quanta2Energy(wave,ledCubeSpectrum));
    scene = sceneAdjustIlluminant(scene,illuminantGet(ill,'energy'),0);
    
    oi = oiCompute(oiCreate,scene);
    
    for c=1:nCameras
        
        %% Simulation
        
        fName = fullfile(parentPath,'Parameters','Cameras',cameras{c});
        filters = ieReadColorFilter(wave,fName);
        filters(isnan(filters)) = 0;
        
        sensor = sensorCreate('bayer (rggb)');
        sensor = sensorSet(sensor,'wave',wave);
        sensor = sensorSet(sensor,'filter spectra',filters);
        sensor = sensorSet(sensor,'ir filter',ones(nWaves,1));
        sensor = sensorSetSizeToFOV(sensor,[sceneGet(scene,'hfov'), sceneGet(scene,'vfov')],scene,oi);
        
        sensor = sensorCompute(sensor,oi);
        
        ieAddObject(sensor);
        sensorWindow();
        
        sz = sensorGet(sensor,'size');
        cp = [1 sz(1);sz(2) sz(1);sz(2) 1;1 1];
        data = macbethSelect(sensor,1,1,cp);
        meanData{t,c} = cell2mat(cellfun(@nanmean,data,'UniformOutput',false)');
        
        %% Emulation
        
        fName = fullfile(parentPath,'Images',target,'Conventional',sprintf('%s_%iK.mat',cameras{c},illTemps(t)));
        imageData = load(fName);
        
        meanMeasuredData{t,c} = zeros(24,3);
        for i=1:3
            sensor = sensorCreate('monochrome');
            sensor = sensorSet(sensor,'name',sprintf('%s-%i',cameras{c},i));
            sensor = sensorSet(sensor,'size',[size(imageData.Img,1) size(imageData.Img,2)]);
            sensor = sensorSet(sensor,'volts',imageData.Img(:,:,i)/max(max(imageData.Img(:,:,i))));
            
            [data, ~, ~, imageCp] = macbethSelect(sensor,1,1,imageCp);
            meanMeasuredData{t,c}(:,i) = cell2mat(cellfun(@nanmean,data,'UniformOutput',false)');
        end
            
    
        % We allow for arbitrary scaling between measured and emulated
        % channels.
        gf = ones(3,1);
        for ii=1:3
            gf(ii) = meanData{t,c}(:,ii)\meanMeasuredData{t,c}(:,ii);
        end
        meanData{t,c} = meanData{t,c}*diag(gf); 

    end
end
%% Scatter plot

for t=1:nTemps 
    figure;
    hold on; grid on; box on;
    title(sprintf('Illuminant temp: %iK',illTemps(t)));
    xlabel('Simulated');
    ylabel('Emulated');
    for c=1:nCameras
        plot(meanData{t,c},meanMeasuredData{t,c},'x');
    end
end